pipeline{
    agent any
    tools {
        maven 'maven3.8.1'
        jdk 'jdk8'
    }
    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "nexus-CP:8081"
        NEXUS_REPOSITORY = "petclinic-snapshots"
        NEXUS_CREDENTIAL_ID = "nexus-credentials"
        dockerImage = ''
        credentialsID = 'docker-credentials'
        registry = 'anastasiiakozlova/petclinic-snapshot'
        pom = ''
    }
    stages {
        stage("build") {
            steps {
                withCredentials([
                    file(credentialsId: 'maven-proxy', variable: 'MAVEN_SETTINGS')
                ]) {
                    echo 'building a jar file'
                    withMaven(globalMavenSettingsConfig: '6a3beec4-d96b-4dc2-bce4-3a99e38b57c1') {
                        sh 'mvn -s $MAVEN_SETTINGS clean package'
                    }
                }
            }
        }
        stage("push to nexus") {
            steps {
                echo 'pushing the jar file to nexus'
                script {
                    // Read POM xml file using 'readMavenPom' step , this step 'readMavenPom' is included in: https://plugins.jenkins.io/pipeline-utility-steps
                    pom = readMavenPom file: "pom.xml";
                    // Find built artifact under target folder
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    // Print some info from the artifact found
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    // Extract the path from the File found
                    artifactPath = filesByGlob[0].path;
                    // Assign to a boolean response verifying If the artifact name exists
                    artifactExists = fileExists artifactPath;

                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";

                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],

                            [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );

                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }
        stage("build a docker image") {
            steps {
                echo 'building a docker image'
                script {
                    dockerImage = docker.build("anastasiiakozlova/petclinic-snapshot:${pom.version}")
                }
            }
        }
        stage("push to docker registry") {
            steps {
                script {
                    docker.withRegistry('', credentialsID) {
                        dockerImage.push()
                    }
                }
            }
        }
        stage('trigger deployment job') {
            steps {
                build job: 'Deployment-Petclinic', parameters: [string(name: 'artifact_version',  value: "${pom.version}")], wait: false
            }
        }
    }
}
